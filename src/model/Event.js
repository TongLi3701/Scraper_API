/**
 * TeSS Write API
 * Create, update materials, events, packages, and workflows in TeSS.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.TeSsWriteApi) {
      root.TeSsWriteApi = {};
    }
    root.TeSsWriteApi.Event = factory(root.TeSsWriteApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Event model module.
   * @module model/Event
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Event</code>.
   * @alias module:model/Event
   * @class
   * @param title {String} The title of the event
   * @param url {String} The url of the event
   */
  var exports = function(title, url) {
    var _this = this;

    _this['title'] = title;
    _this['url'] = url;









  };

  /**
   * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Event} obj Optional instance to populate.
   * @return {module:model/Event} The populated <code>Event</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('title')) {
        obj['title'] = ApiClient.convertToType(data['title'], 'String');
      }
      if (data.hasOwnProperty('url')) {
        obj['url'] = ApiClient.convertToType(data['url'], 'String');
      }
      if (data.hasOwnProperty('start')) {
        obj['start'] = ApiClient.convertToType(data['start'], 'Date');
      }
      if (data.hasOwnProperty('end')) {
        obj['end'] = ApiClient.convertToType(data['end'], 'Date');
      }
      if (data.hasOwnProperty('sponsors')) {
        obj['sponsors'] = ApiClient.convertToType(data['sponsors'], ['String']);
      }
      if (data.hasOwnProperty('venue')) {
        obj['venue'] = ApiClient.convertToType(data['venue'], 'String');
      }
      if (data.hasOwnProperty('city')) {
        obj['city'] = ApiClient.convertToType(data['city'], 'String');
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('postcode')) {
        obj['postcode'] = ApiClient.convertToType(data['postcode'], 'String');
      }
      if (data.hasOwnProperty('keywords')) {
        obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
      }
      if (data.hasOwnProperty('target_audience')) {
        obj['target_audience'] = ApiClient.convertToType(data['target_audience'], ['String']);
      }
    }
    return obj;
  }

  /**
   * The title of the event
   * @member {String} title
   */
  exports.prototype['title'] = undefined;
  /**
   * The url of the event
   * @member {String} url
   */
  exports.prototype['url'] = undefined;
  /**
   * The start date of the event
   * @member {Date} start
   */
  exports.prototype['start'] = undefined;
  /**
   * The end date of the event
   * @member {Date} end
   */
  exports.prototype['end'] = undefined;
  /**
   * The sponsors of the events
   * @member {Array.<String>} sponsors
   */
  exports.prototype['sponsors'] = undefined;
  /**
   * The venue of the event
   * @member {String} venue
   */
  exports.prototype['venue'] = undefined;
  /**
   * The city where the event happens
   * @member {String} city
   */
  exports.prototype['city'] = undefined;
  /**
   * The country where the event happens
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * The postcode of the venue
   * @member {String} postcode
   */
  exports.prototype['postcode'] = undefined;
  /**
   * The keywords of the event
   * @member {Array.<String>} keywords
   */
  exports.prototype['keywords'] = undefined;
  /**
   * The target audience of the event
   * @member {Array.<String>} target_audience
   */
  exports.prototype['target_audience'] = undefined;



  return exports;
}));


